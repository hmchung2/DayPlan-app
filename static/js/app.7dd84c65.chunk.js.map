{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","editingKey","setEditingKey","saveToDos","toSave","a","async","s","JSON","stringify","AsyncStorage","setItem","console","log","onChangeText","payload","saveStatus","status","cancelEdit","useEffect","getItem","parse","loadStatus","loadToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TouchableHighlight","underlayColor","activeOpacity","TextInput","onSubmitEditing","newToDos","Date","now","work","complete","returnKeyType","autoFocus","value","keyboardType","placeholder","input","ScrollView","Object","keys","map","key","toDo","editingTodo","newTodos","editTodo","editInput","onEndEditing","toDoText","textDecorationLine","fontWeight","emoJibtn","eachEmoji","Platform","OS","confirm","Alert","alert","deleteTodo","Fontisto","name","size","editText","AntDesign","completeTodo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","marginHorizontal"],"mappings":"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","file":"static/js/app.7dd84c65.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n  Pressable,\n  TextInput,\n  ScrollView,\n  Alert,\n  BackHandler,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\nconst STORAGE_KEY = \"@toDos\";\nconst STATUS_KEY = \"@status\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [editingKey, setEditingKey] = useState(\"\");\n\n  const saveToDos = async (toSave) => {\n    try {\n      const s = JSON.stringify(toSave);\n      await AsyncStorage.setItem(STORAGE_KEY, s);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onChangeText = (payload) => {\n    setText(payload);\n    console.log(\"changed : \" + text);\n  };\n\n  const saveStatus = async (status) => {\n    try {\n      console.log(\"Saving Working : \" + status);\n      const s = JSON.stringify(status);\n      await AsyncStorage.setItem(STATUS_KEY, s);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const travel = () => {\n    cancelEdit();\n    setEditingKey(\"\");\n    setWorking(false);\n    saveStatus(false);\n    console.log(\"travel\");\n  };\n\n  const work = () => {\n    cancelEdit();\n    setEditingKey(\"\");\n    setWorking(true);\n    saveStatus(true);\n    console.log(\"work\");\n  };\n\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n    console.log(s);\n  };\n\n  const loadStatus = async () => {\n    console.log(\"loading Status\");\n    const s = await AsyncStorage.getItem(STATUS_KEY);\n    if (s) {\n      console.log(s);\n      setWorking(JSON.parse(s));\n    }\n  };\n\n  const editTodo = async (key) => {\n    if (text === \"\") {\n      return;\n    }\n\n    const editingTodo = toDos[key];\n    console.log(editingTodo);\n    editingTodo[\"text\"] = text;\n    const newTodos = toDos;\n    newTodos[key] = editingTodo;\n    setToDos(newTodos);\n    await saveToDos(newTodos);\n    setText(\"\");\n    setEditingKey(\"\");\n  };\n\n  const addTodo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    //alert(text);\n    // const newToDos = Object.assign({}, toDos, {\n    //   [Date.now()]: { text, work: working },\n    // });\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, work: working, complete: false },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  const logText = () => {\n    console.log(\"log : \" + text);\n  };\n\n  const editText = (key) => {\n    setEditingKey(key);\n  };\n\n  const completeTodo = async (key) => {\n    const newTodos = { ...toDos };\n    const completeTodo = newTodos[key];\n    completeTodo[\"complete\"] = true;\n    console.log(\"completed : \", completeTodo);\n\n    newTodos[key] = completeTodo;\n    setToDos(newTodos);\n    await saveToDos(newTodos);\n  };\n\n  const cancelEdit = () => {\n    setText(\"\");\n    setEditingKey(\"\");\n  };\n\n  const deleteTodo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do  you want to delete this To Do?\");\n      if (ok) {\n        const newTodos = { ...toDos };\n        delete newTodos[key];\n        setToDos(newTodos);\n        await saveToDos(newTodos);\n      }\n    } else {\n      Alert.alert(\"Delete to Do? \", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"Yes\",\n          onPress: async () => {\n            const newTodos = { ...toDos };\n            delete newTodos[key];\n            setToDos(newTodos);\n            await saveToDos(newTodos);\n          },\n        },\n      ]);\n    }\n  };\n\n  // const handleBackButtonClick = () => {\n  //   console.log(\"back Button Clicked\");\n  //   cancelEdit();\n  //   return true;\n  // };\n\n  //console.log(toDos);\n  useEffect(() => {\n    //BackHandler.addEventListener(\"hardwareBackPress\", handleBackButtonClick);\n    loadStatus();\n    loadToDos();\n    // return () => {\n    //   BackHandler.removeEventListener(\n    //     \"hardwareBackPress\",\n    //     handleBackButtonClick\n    //   );\n    // };\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{ ...styles.btnText, color: working ? \"white\" : theme.grey }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableHighlight\n          underlayColor=\"grey\"\n          activeOpacity={0.01}\n          onPress={travel}\n        >\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableHighlight>\n\n        {/* <Pressable>\n          <Text style={styles.btnText}>Travel</Text>\n        </Pressable> */}\n        {/* <TouchableOpacity activeOpacity={0}>\n          <Text style={styles.btnText}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity>\n          <Text style={styles.btnText}>Travel</Text>\n        </TouchableOpacity> */}\n      </View>\n\n      <TextInput\n        onSubmitEditing={addTodo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        autoFocus={true}\n        value={text}\n        keyboardType=\"default\"\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={editingKey == \"\" ? styles.input : null}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          working == toDos[key].work ? (\n            <View style={styles.toDo} key={key}>\n              {key == editingKey ? (\n                <TextInput\n                  onSubmitEditing={() => editTodo(key)}\n                  onChangeText={onChangeText}\n                  returnKeyType=\"done\"\n                  value={text}\n                  autoFocus={true}\n                  keyboardType=\"default\"\n                  style={styles.editInput}\n                  onEndEditing={cancelEdit}\n                ></TextInput>\n              ) : (\n                <Text\n                  style={\n                    toDos[key].complete\n                      ? {\n                          ...styles.toDoText,\n                          textDecorationLine: \"line-through\",\n                          color: theme.grey,\n                          fontWeight: \"300\",\n                        }\n                      : styles.toDoText\n                  }\n                >\n                  {toDos[key].text}\n                </Text>\n              )}\n\n              <View style={styles.emoJibtn}>\n                <TouchableOpacity\n                  style={styles.eachEmoji}\n                  onPress={() => deleteTodo(key)}\n                >\n                  <Fontisto name=\"trash\" size={18} color={theme.grey} />\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={styles.eachEmoji}\n                  onPress={() => editText(key)}\n                >\n                  <AntDesign name=\"edit\" size={18} color=\"black\" />\n                </TouchableOpacity>\n\n                {!toDos[key].complete ? (\n                  <TouchableOpacity\n                    style={styles.eachEmoji}\n                    onPress={() => completeTodo(key)}\n                  >\n                    <Fontisto name=\"check\" size={18} color={theme.grey} />\n                  </TouchableOpacity>\n                ) : (\n                  <TouchableOpacity></TouchableOpacity>\n                )}\n              </View>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    flex: 1,\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 40,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  toDoText: {\n    flex: 5,\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"800\",\n  },\n  emoJibtn: {\n    flex: 3,\n    flexDirection: \"row-reverse\",\n    justifyContent: \"flex-start\",\n  },\n  eachEmoji: {\n    marginHorizontal: 10,\n  },\n  editInput: {\n    backgroundColor: \"#D3D3D3\",\n  },\n});\n"],"sourceRoot":""}